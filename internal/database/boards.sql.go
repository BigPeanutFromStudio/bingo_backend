// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: boards.sql

package database

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const createBoard = `-- name: CreateBoard :one
INSERT INTO boards (id, name, events, created_at, updated_at, owner_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, events, created_at, updated_at, owner_id
`

type CreateBoardParams struct {
	ID        uuid.UUID
	Name      string
	Events    json.RawMessage
	CreatedAt time.Time
	UpdatedAt time.Time
	OwnerID   uuid.UUID
}

func (q *Queries) CreateBoard(ctx context.Context, arg CreateBoardParams) (Board, error) {
	row := q.db.QueryRowContext(ctx, createBoard,
		arg.ID,
		arg.Name,
		arg.Events,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.OwnerID,
	)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Events,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerID,
	)
	return i, err
}

const getUserBoards = `-- name: GetUserBoards :many
SELECT id, name, events, created_at, updated_at, owner_id FROM boards WHERE owner_id = $1
`

func (q *Queries) GetUserBoards(ctx context.Context, ownerID uuid.UUID) ([]Board, error) {
	rows, err := q.db.QueryContext(ctx, getUserBoards, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Board
	for rows.Next() {
		var i Board
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Events,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
