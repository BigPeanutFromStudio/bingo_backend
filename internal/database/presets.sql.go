// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: presets.sql

package database

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const createPreset = `-- name: CreatePreset :one
INSERT INTO presets (id, name, events, created_at, updated_at, owner_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, events, created_at, updated_at, owner_id
`

type CreatePresetParams struct {
	ID        uuid.UUID
	Name      string
	Events    json.RawMessage
	CreatedAt time.Time
	UpdatedAt time.Time
	OwnerID   string
}

func (q *Queries) CreatePreset(ctx context.Context, arg CreatePresetParams) (Preset, error) {
	row := q.db.QueryRowContext(ctx, createPreset,
		arg.ID,
		arg.Name,
		arg.Events,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.OwnerID,
	)
	var i Preset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Events,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerID,
	)
	return i, err
}

const getUserPresetByID = `-- name: GetUserPresetByID :one
SELECT id, name, events, created_at, updated_at, owner_id FROM presets WHERE id = $1
`

func (q *Queries) GetUserPresetByID(ctx context.Context, id uuid.UUID) (Preset, error) {
	row := q.db.QueryRowContext(ctx, getUserPresetByID, id)
	var i Preset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Events,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerID,
	)
	return i, err
}

const getUserPresets = `-- name: GetUserPresets :many
SELECT id, name, events, created_at, updated_at, owner_id FROM presets WHERE owner_id = $1
`

func (q *Queries) GetUserPresets(ctx context.Context, ownerID string) ([]Preset, error) {
	rows, err := q.db.QueryContext(ctx, getUserPresets, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Preset
	for rows.Next() {
		var i Preset
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Events,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.OwnerID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePresetEvents = `-- name: UpdatePresetEvents :one
UPDATE presets SET events = $1
WHERE id = $2
RETURNING id, name, events, created_at, updated_at, owner_id
`

type UpdatePresetEventsParams struct {
	Events json.RawMessage
	ID     uuid.UUID
}

func (q *Queries) UpdatePresetEvents(ctx context.Context, arg UpdatePresetEventsParams) (Preset, error) {
	row := q.db.QueryRowContext(ctx, updatePresetEvents, arg.Events, arg.ID)
	var i Preset
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Events,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.OwnerID,
	)
	return i, err
}
