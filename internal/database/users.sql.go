// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: users.sql

package database

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, nickname, public_id, email, picture_url, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, nickname, public_id, email, picture_url, created_at, updated_at
`

type CreateUserParams struct {
	ID         string
	Nickname   string
	PublicID   string
	Email      string
	PictureUrl string
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Nickname,
		arg.PublicID,
		arg.Email,
		arg.PictureUrl,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.PublicID,
		&i.Email,
		&i.PictureUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT nickname, public_id, picture_url FROM users
`

type GetAllUsersRow struct {
	Nickname   string
	PublicID   string
	PictureUrl string
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUsersRow
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(&i.Nickname, &i.PublicID, &i.PictureUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, nickname, public_id, email, picture_url, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.PublicID,
		&i.Email,
		&i.PictureUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByPublicID = `-- name: GetUserByPublicID :one
SELECT id, nickname, public_id, email, picture_url, created_at, updated_at FROM users WHERE public_id = $1
`

func (q *Queries) GetUserByPublicID(ctx context.Context, publicID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPublicID, publicID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.PublicID,
		&i.Email,
		&i.PictureUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users SET nickname = $1 
WHERE id = $2
RETURNING id, nickname, public_id, email, picture_url, created_at, updated_at
`

type UpdateUserParams struct {
	Nickname string
	ID       string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Nickname, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.PublicID,
		&i.Email,
		&i.PictureUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
